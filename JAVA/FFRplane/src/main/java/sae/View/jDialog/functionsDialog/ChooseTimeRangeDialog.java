package sae.view.jDialog.functionsDialog;

import java.util.Calendar;
import java.util.Date;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import sae.utils.Settings;
import sae.view.jFrame.MainFrame;

/**
 * Cette classe représente une boîte de dialogue permettant de choisir un intervalle
 * horaire pour afficher les vols.
 * Elle étend javax.swing.JDialog.
 *
 * L'utilisateur peut sélectionner une heure de début et une heure de fin à l'aide
 * de spinners.
 *
 * Les fonctionnalités incluent :
 * - Initialisation des spinners avec l'heure courante et une heure de fin par défaut.
 * - Gestion des actions des boutons Ok, Annuler et Supprimer l'intervalle.
 * - Mise à jour des paramètres de l'application via la classe Settings.
 * - Rafraîchissement de la fenêtre principale après modification des paramètres.
 *
 * @author mathe
 * @author fillo
 */
public class ChooseTimeRangeDialog extends javax.swing.JDialog {
    
    /**
     * Constructeur de la classe ChooseTimeRangeDialog.
     *
     * @param parent Le frame parent de la boîte de dialogue.
     * @param modal Un booléen indiquant si la boîte de dialogue est modale ou non.
     */
    public ChooseTimeRangeDialog(javax.swing.JFrame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initHours();
        setLocationRelativeTo(null);
        
        if(Settings.getRefiningStartTimeRange()!= null) {
            deleteSettingButton.setVisible(true);
            spinnerStartTimeRange.setValue(Settings.getRefiningStartTimeRange());
            spinnerEndTimeRange.setValue(Settings.getRefiningEndTimeRange());
        }
        else deleteSettingButton.setVisible(false);
        
        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        labelTitle = new javax.swing.JLabel();
        spinnerStartTimeRange = new javax.swing.JSpinner();
        spinnerEndTimeRange = new javax.swing.JSpinner();
        separator = new javax.swing.JSeparator();
        labelEndHour = new javax.swing.JLabel();
        labelStartHour = new javax.swing.JLabel();
        ChoicesPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        deleteSettingButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Veuillez sélectionner un intervalle horaire");

        spinnerStartTimeRange.setMaximumSize(new java.awt.Dimension(40, 20));
        spinnerStartTimeRange.setMinimumSize(new java.awt.Dimension(40, 20));
        spinnerStartTimeRange.setPreferredSize(new java.awt.Dimension(40, 20));

        spinnerEndTimeRange.setMaximumSize(new java.awt.Dimension(40, 20));
        spinnerEndTimeRange.setMinimumSize(new java.awt.Dimension(40, 20));
        spinnerEndTimeRange.setPreferredSize(new java.awt.Dimension(40, 20));

        labelEndHour.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelEndHour.setText("Heure fin");

        labelStartHour.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelStartHour.setText("Heure début");

        ChoicesPanel.setMaximumSize(new java.awt.Dimension(360, 80));
        ChoicesPanel.setMinimumSize(new java.awt.Dimension(360, 80));

        cancelButton.setBackground(new java.awt.Color(235, 173, 59));
        cancelButton.setForeground(new java.awt.Color(0, 0, 0));
        cancelButton.setText("Annuler");
        cancelButton.setFocusPainted(false);
        cancelButton.setMaximumSize(new java.awt.Dimension(100, 25));
        cancelButton.setMinimumSize(new java.awt.Dimension(100, 25));
        cancelButton.setPreferredSize(new java.awt.Dimension(100, 25));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setBackground(new java.awt.Color(235, 173, 59));
        okButton.setForeground(new java.awt.Color(0, 0, 0));
        okButton.setText("Ok");
        okButton.setFocusPainted(false);
        okButton.setMaximumSize(new java.awt.Dimension(100, 25));
        okButton.setMinimumSize(new java.awt.Dimension(100, 25));
        okButton.setPreferredSize(new java.awt.Dimension(100, 25));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        deleteSettingButton.setBackground(new java.awt.Color(235, 173, 59));
        deleteSettingButton.setForeground(new java.awt.Color(0, 0, 0));
        deleteSettingButton.setText("Retirer ce paramètre");
        deleteSettingButton.setFocusPainted(false);
        deleteSettingButton.setMaximumSize(new java.awt.Dimension(100, 25));
        deleteSettingButton.setMinimumSize(new java.awt.Dimension(100, 25));
        deleteSettingButton.setPreferredSize(new java.awt.Dimension(100, 25));
        deleteSettingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSettingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ChoicesPanelLayout = new javax.swing.GroupLayout(ChoicesPanel);
        ChoicesPanel.setLayout(ChoicesPanelLayout);
        ChoicesPanelLayout.setHorizontalGroup(
            ChoicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChoicesPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(ChoicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteSettingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ChoicesPanelLayout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        ChoicesPanelLayout.setVerticalGroup(
            ChoicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChoicesPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(ChoicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteSettingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(100, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ChoicesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(labelEndHour, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(separator)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(spinnerStartTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(25, 25, 25)
                                    .addComponent(spinnerEndTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(100, 100, 100))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spinnerEndTimeRange, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(spinnerStartTimeRange, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEndHour)
                    .addComponent(labelStartHour))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(ChoicesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /* ••••••••••••• MÉTHODES ••••••••••••• */
    
    
    /**
     * Initialise les spinners d'heure avec l'heure courante pour l'heure de début
     * et une heure de fin calculée par défaut (2 heures après l'heure courante).
     */
    private void initHours() {
        Date date = new Date();

        SpinnerDateModel smStart = new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        spinnerStartTimeRange.setModel(smStart);

        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.HOUR_OF_DAY, 2);
        Date endDate = calendar.getTime();

        SpinnerDateModel smEnd = new SpinnerDateModel(endDate, null, null, Calendar.HOUR_OF_DAY);
        spinnerEndTimeRange.setModel(smEnd);

        JSpinner.DateEditor dateEditorStart = new JSpinner.DateEditor(spinnerStartTimeRange, "HH:mm");
        JSpinner.DateEditor dateEditorEnd = new JSpinner.DateEditor(spinnerEndTimeRange, "HH:mm");

        spinnerStartTimeRange.setEditor(dateEditorStart);
        spinnerEndTimeRange.setEditor(dateEditorEnd);
    }
    
    
    /* ••••••••••••• LISTENERS ••••••••••••• */
    
    
    /**
     * Action exécutée lorsque le bouton Annuler est cliqué.
     * Ferme la boîte de dialogue.
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    
    /**
     * Action exécutée lorsque le bouton Ok est cliqué.
     * Enregistre l'heure de début et l'heure de fin sélectionnées dans les paramètres,
     * puis rafraîchit la fenêtre principale.
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        Settings.setRefiningStartTimeRange((Date)spinnerStartTimeRange.getValue());
        Settings.setRefiningEndTimeRange((Date)spinnerEndTimeRange.getValue());
        ((MainFrame)getParent()).getController().refreshMainFrame();
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed
    
    
    /**
     * Action exécutée lorsque le bouton Supprimer l'intervalle est cliqué.
     * Efface les valeurs des heures de début et de fin dans les paramètres,
     * puis rafraîchit la fenêtre principale.
     */
    private void deleteSettingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSettingButtonActionPerformed
        Settings.setRefiningStartTimeRange(null);
        Settings.setRefiningEndTimeRange(null);
        ((MainFrame)getParent()).getController().refreshMainFrame();
        dispose();
    }//GEN-LAST:event_deleteSettingButtonActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChoicesPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deleteSettingButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel labelEndHour;
    private javax.swing.JLabel labelStartHour;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JButton okButton;
    private javax.swing.JSeparator separator;
    private javax.swing.JSpinner spinnerEndTimeRange;
    private javax.swing.JSpinner spinnerStartTimeRange;
    // End of variables declaration//GEN-END:variables
}
